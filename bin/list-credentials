#!/usr/bin/env ruby

# Usage: list-credentials [FILE ...]
# Where each FILE is one of the "credential-report.json" files dumped by aws-query.

# For each file, emits one line to standard output for:
# - each credential (access key, password, certificate)
# - each user (showing a summary of this user's authentication methods)

require 'json'
require 'time'
require 'optparse'

def looks_like_cf_name(n)
  !!(n.match /-[A-Z0-9]{6,}$/)
end

def found_credentials(is_cloudformation, label, active, created, username, min_date, max_date)
  if min_date.nil? or created > min_date
    if max_date.nil? or created < max_date
      puts "#{@account}\t#{is_cloudformation}\t#{label}\t#{active}\t#{created.strftime '%Y-%m-%dT%H:%M:%S'}\t#{username}"
    end
  end
end

def process_report(data, min_date, max_date)
  data["CredentialReport"].each do |user|
    name = user["user"]
    next if name == "<root_account>"

    is_cf = looks_like_cf_name(name)

    [1,2].each do |n|
      rot_str = user["access_key_#{n}_last_rotated"]
      next if rot_str == "N/A"
      rotated = DateTime.parse(rot_str)
      active = user["access_key_#{n}_active"]
      active.gsub! "inactive", "inact"
      found_credentials is_cf, "access"+n.to_s, active, rotated, name, min_date, max_date
    end

    [1,2].each do |n|
      rot_str = user["cert_#{n}_last_rotated"]
      next if rot_str == "N/A"
      rotated = DateTime.parse(rot_str)
      active = user["cert_#{n}_active"]
      active.gsub! "inactive", "inact"
      found_credentials is_cf, "cert"+n.to_s, active, rotated, name, min_date, max_date
    end

    loop do
      rot_str = user["password_last_changed"]
      break if rot_str == "N/A"
      rotated = DateTime.parse(rot_str)
      active = if user["mfa_active"] == "true"
                 "mfa-on"
               else
                 "mfa-off"
               end
      found_credentials is_cf, "passwd", active, rotated, name, min_date, max_date
      break
    end

    flags = ""
    [
      %w[ access_key_1 K1 xx ],
      %w[ access_key_2 K2 xx ],
      %w[ cert_1 C1 xx ],
      %w[ cert_2 C2 xx ],
    ].each do |key_prefix, active, inactive|
      flags += if user["#{key_prefix}_last_rotated"] == "N/A"
                 '--'
               elsif user["#{key_prefix}_active"] == "true"
                 active
               else
                 inactive
               end
    end

    flags += if user["password_enabled"] == "false"
               "-"
             else
               "P"
             end
    flags += if user["mfa_active"] == "false"
               "-"
             else
               "M"
             end

    puts "#{@account}\t#{is_cf}\tmethods\t#{flags}\t-\t#{name}"

  end
end

min_date = nil
max_date = nil

opts_parser = OptionParser.new do |opts|
  opts.banner = "list-credentials [--before DATE] [--after DATE] FILE ..."
  opts.on("--before", "-b=s", "Only include credentials changed before this date") do |v|
    max_date = DateTime.parse(v)
  end
  opts.on("--after", "-a=s", "Only include credentials changed after this date") do |v|
    min_date = DateTime.parse(v)
  end
end.order!

ARGV.each do |file|

  m = file.match /\/account.*?\/(.*?)\//
  @account = if m
               m[1]
             else
               "<unknown-account>"
             end
  data = JSON.parse(IO.read file)
  process_report data, min_date, max_date
end

# eof old-credentials
